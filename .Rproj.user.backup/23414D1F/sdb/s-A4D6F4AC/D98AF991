{
    "collab_server" : "",
    "contents" : "\n#create a mapping for instagram posts, to search for posts in a certain range\n#from a lat long\n\ncreateLocationMapping <- function(country =\"\", city = \"\", lat_long = FALSE){\n\n\n\n  #-------------------------------\n  #----COUNTRY SEARCH-------------\n  #-------------------------------\n\n  if(country[1] != \"\"){\n    country_search <- data.frame()\n    for(row in 1:length(country)){\n      country_search[row, 1] <- country[row]\n      country_search[row,2] <- FALSE\n    }\n  }\n\n\n  page <- \"\"\n  more_available <- TRUE\n  country_found <- FALSE\n  country_data <- data.frame()\n\n  while(!country_found && more_available){\n\n    #get the link for the generic location explore hub\n    url <- getLocationExploreLink(pageID = page)\n\n    #get the data from the link\n    #will return the first page of countries\n    response <- jsonlite::fromJSON(url)\n\n    #flattening the data down to the nodes, into a dataframe\n    response_data <- jsonlite::flatten(response$country_list)\n\n    #for every country on the current page\n    for(row in 1:nrow(response_data)){\n\n      #if mapping all countries, add all information to the country data\n      if(country[1] == \"\"){\n        country_data <- rbind(country_data,response_data[row,])\n      }\n      #check if the country name matches what we are searching for\n\n      else{\n        for(country_number in 1:nrow(country_search)){\n          if(response_data[row,2] == country_search[country_number,1]){\n            country_search[country_number,2] <- TRUE\n            country_data <- rbind(country_data,response_data[row,])\n          }\n        }\n      }\n\n    }\n\n    #if there is a next page\n    if( !is.null(response$next_page)){\n      page = response$next_page\n    }\n    else{\n      more_available = FALSE\n    }\n\n    if(nrow(country_data) == nrow(country_search)){\n      country_found <- TRUE\n    }\n\n  }\n\n  #if the country could not be found when not cataloguing all countries\n  if(!more_available && !country_found && country != \"\"){\n    stop(\"Could not find country\")\n\n  }\n\n  #-------------------------------\n  #----CITY SEARCH-------------\n  #-------------------------------\n\n\n  if(city[1] != \"\"){\n    city_search <- data.frame()\n    for(row in 1:length(city)){\n      city_search[row, 1] <- city[row]\n      city_search[row,2] <- FALSE\n    }\n  }\n\n  city_data <- data.frame()\n  city_found <- FALSE\n\n  for(row in 1:nrow(country_data)){\n\n    print(paste(row,\" / \", nrow(country_data), \" countries\", sep = \"\"))\n    print(country_data[row,2])\n\n\n    page <- \"\"\n    more_available <- TRUE\n\n    # city_data[, \"country_ID\"] <- NA\n    # city_data[, \"country_Name\"] <- NA\n    # city_data[, \"country_Slug\"] <- NA\n\n\n    while(!city_found && more_available){\n\n      #get the link for the generic location explore hub\n      url <- getLocationExploreLink(countryID = country_data[row,1], countrySlug = country_data [row,3], pageID = page)\n\n      #get the data from the link\n      #will return the first page of countries\n      response <- jsonlite::fromJSON(url)\n\n\n      if(length(response$city_list) == 0){\n        more_available = FALSE\n      }\n      else{\n        #flattening the data down to the nodes, into a dataframe\n        response_data <- jsonlite::flatten(response$city_list)\n\n        #for every country on the current page\n        for(subrow in 1:nrow(response_data)){\n\n          #if mapping all countries, add all information to the country data\n          if(city[1] == \"\"){\n            city_data <- plyr::rbind.fill(city_data,response_data[subrow,])\n\n            city_data[nrow(city_data), \"country_ID\"] <- country_data[row,1]\n            city_data[nrow(city_data), \"country_Name\"] <- country_data[row,2]\n            city_data[nrow(city_data), \"country_Slug\"] <- country_data[row,3]\n          }\n          #check if the country name matches what we are searching for\n          else{\n            for(city_number in 1:nrow(city_search)){\n              if(response_data[subrow,2] == city_search[city_number,1]){\n                city_search[city_number,2] <- TRUE\n\n                city_data <- plyr::rbind.fill(city_data,response_data[subrow,])\n\n                city_data[nrow(city_data), \"country_ID\"] <- country_data[row,1]\n                city_data[nrow(city_data), \"country_Name\"] <- country_data[row,2]\n                city_data[nrow(city_data), \"country_Slug\"] <- country_data[row,3]\n              }\n            }\n          }\n\n        }#end nested for loop\n\n        #if there is a next page\n        if( !is.null(response$next_page)){\n          page = response$next_page\n        }\n        else{\n          more_available = FALSE\n        }\n\n        if(nrow(city_data) == nrow(city_search)){\n          city_found <- TRUE\n        }\n      }#end else\n\n    }#end while loop\n\n\n  } #end for loop\n\n  #-------------------------------\n  #----LOCATION SEARCH-------------\n  #-------------------------------\n\n\n  location_data <- data.frame()\n\n  for(row in 1:nrow(city_data)){\n\n    print(paste(row,\" / \", nrow(city_data), \" cities\", sep = \"\"))\n    print(city_data[row,2])\n\n\n    page <- \"\"\n    more_available <- TRUE\n\n    # city_data[, \"country_ID\"] <- NA\n    # city_data[, \"country_Name\"] <- NA\n    # city_data[, \"country_Slug\"] <- NA\n\n\n    while(more_available){\n\n      #get the link for the generic location explore hub\n      url <- getLocationExploreLink(countryID = city_data[row,1], countrySlug = city_data [row,3], pageID = page)\n\n      #get the data from the link\n      #will return the first page of countries\n      response <- jsonlite::fromJSON(url)\n\n      if(length(response$location_list) == 0){\n        more_available = FALSE\n      }\n      else{\n        #flattening the data down to the nodes, into a dataframe\n        response_data <- jsonlite::flatten(response$location_list)\n\n        #for every country on the current page\n        for(subrow in 1:nrow(response_data)){\n#\n#           print(paste(subrow,\" / \", nrow(response_data), \" locations\", sep = \"\"))\n#           print(response_data[subrow,2])\n\n          location_data <- plyr::rbind.fill(location_data,response_data[subrow,])\n          location_data[nrow(location_data), \"city_ID\"] <- city_data[row,1]\n          location_data[nrow(location_data), \"city_Name\"] <- city_data[row,2]\n          location_data[nrow(location_data), \"cityy_Slug\"] <- city_data[row,3]\n          location_data[nrow(location_data), \"country_ID\"] <- city_data[row,4]\n          location_data[nrow(location_data), \"country_Name\"] <- city_data[row,5]\n          location_data[nrow(location_data), \"country_Slug\"] <- city_data[row,6]\n\n        }#end nested for loop\n\n        #if there is a next page\n        if( !is.null(response$next_page)){\n          page = response$next_page\n        }\n        else{\n          more_available = FALSE\n        }\n      }#end else\n\n    }#end while loop\n\n  } #end for loop\n\n  if(!lat_long){\n\n    return(location_data)\n  }\n\n  #-------------------------------\n  #----LAT LONG GENERATION--------\n  #-------------------------------\n\n  print(paste(\"Total Locations: \",nrow(location_data), sep = \"\"))\n  percent <- 0\n  time <- Sys.time()\n\n\n\n  for(row in 1:nrow(location_data)){\n\n    if(row/nrow(location_data) > percent+.025){\n      print(paste(\"Progress: \",round(percent * 100,2), \"%\", sep = \"\"))\n      percent <- row/nrow(location_data)\n\n      print(paste(\"Est Time Left: \",round((Sys.time() - time)*(100 - percent*100),4), \"seconds\", sep = \"\"))\n      time <- Sys.time()\n    }\n\n    location_url <- getLocationExploreLink(countryID = location_data[row,1], countrySlug = location_data[row,3])\n    location_response <- jsonlite::fromJSON(location_url)\n\n    if(!is.null( location_response$location$lat)){\n\n      location_data[row, \"latitude\"] <- location_response$location$lat\n    }\n    if(!is.null(location_response$location$lng)){\n\n      location_data[row, \"longitude\"] <- location_response$location$lng\n    }\n\n  }#end lat long for loop\n\n\n\n  return(location_data)\n\n}\n",
    "created" : 1516820993159.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3679133893",
    "id" : "D98AF991",
    "lastKnownWriteTime" : 1516828535,
    "last_content_update" : 1516828535858,
    "path" : "C:/Users/Anthony/Dropbox/Thesis/instaExtract/instaExtract/R/createLocationMapping.R",
    "project_path" : "R/createLocationMapping.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}